REACT 

É uma BIBLIOTECA JavaScript de código aberto, criada para 
construir interfaces de usuário (UI) interativas em aplicações 
web.
Em termos mais simples, React permite que você divida sua 
interface em partes menores e reutilizáveis chamadas componentes.
Cada componente tem sua própria lógica e aparência, o que torna o
desenvolvimento e a manutenção do código mais fáceis. 
 
  - JSX: 
	Uma extensão de sintaxe do JavaScript que permite escrever
	código HTML dentro do JavaScript, facilitando a criação e
	a manutenção de componentes. 


Criando o primeiro script com React:

1- É necessário criar um arquivo HTML e nele adicionar links de 
   script CDN, para poder utuilizar o REACT. Cada elemento em JSX
   é na verdade um OBJETO{}, o que facilita muito a manipulação.

2- No <body> crie uma <div> com ID 'root' por convenção. Pois será
   neste elemento que o nosso script React vai ser mostrado.

	* <div id="root"></div>

3- Crie um <script> apontando para o seu arquivo .js onde será    
   feito o script REACT:

	* <script type="text/babel" src="app.js"></script>

	OBS.: É OBRIGATÓRIO ADICIONAR O ATRIBUTO 'type' com:
	      text/babel. Para que o arquivo .js possa INTERPRETAR
	      o JSX do seu script REACT.

4- No arquivo 'app.js' crie o método de RENDERIZAÇÃO para mostrar
   seu JSX no HTML:

	* ReactDOM.render(<h1>Olá mundo do React!</h1>,
	  document.getElementById('root'));

		- ReactDOM.render(): Para RENDERIZAR na arvore DOM
				     com 2 parametros:

			1- <h1>Olá mundo do React!</h1>: tag HTML;

			2- document.getElementById('root'): 
				A <div> root, que é onde será 
				mostrado o nosso script.


OBS.: Para adicionar uma classe(class) ao elemento basta usar o 
      atributo 'className'.

	ex.: const elemento = <h1 className="header">Olá mundo
	     JSX!</h1>;



Funcionalidades do JSX

O JSX aceita: Constantes/variaveis, objetos, funções, etc...
Para isto basta utilizar as mesmas dentro de chaves{}.

ex. CONSTANTE/VARIAVEL: 

    - const nome = 'Anderson Bernardo';
      const elemento= <h1 className="header">Olá, {nome}!</h1>

ex. OBJETO: 
 
   - const user = {
    	nome: 'Anderson',
    	sobrenome: 'Bernardo'
     };

     const elemento= <h1 className="header">Olá, {user.nome}!</h1>

ex. FUNÇÃO: 

   - function nomeCompleto(user) {
    	return user.nome + ' ' + user.sobrenome;
     };

     const elemento= <h1 className="header">Olá, 
     {nomeCompleto(user)}!</h1>



PARA JSX COM MAIS DE UM ELEMENTO

Quando elementos JSX tem mais de UMA tag, é necessário que eles 
estejam dentro de uma tag PAI. Como uma <div>.

ex.: const elemento = (
    	<div>
            <h1 className="header">Olá, {nomeCompleto(user)}!</h1>
            <p>Isto é um paragrafo.</p>
        </div>
     );

    OBS.: É INTERESSANTE que estes elementos estejam entre 
	  PARENTESES(), para facilitar a leitura e a organização 
	  do script.



COMPONENTES FUNÇÃO E PROPS(propriedades)

COMPONENTES são blocos de construção reutilizáveis que formam a 
interface do usuário, enquanto PROPS são dados que são passados 
de um componente pai para um componente filho. Em resumo, 
COMPONENTES são como peças de LEGO que se encaixam para criar a 
interface, e PROPS são como instruções que dizem a cada peça o 
que fazer ou como se comportar. 

OBS.: Por CONVENSÃO os componentes devem ser nomeados com letra 
      maiuscula no INICIO da palavra e também para SEPARAR 
      palavras(camel-case). 

	ex.: function FazerContagem(){...}


EXEMPLO de COMPONENTE: 

	- function BemVindo() {
        	return <h1>Olá Mundo!</h1>
    	  };

Para RENDERIZAR:

	- ReactDOM.render(
    		<BemVindo/>,
    		document.getElementById('root')
  	 );

   * Um COMPONENTE vira uma TAG. Neste caso <BemVindo/>.

	OBS.: É necessário que após o nome do COMPONENTE e as
	      PROPS tenha uma '/' para FECHAR a tag.


EXEMPLO DE COMPONETE COM PROPS:

	- function BemVindo(props) {
        	return <h1>Olá {props.nome}!</h1>
    	  };

	  ReactDOM.render(
    		<BemVindo nome='Bernardo'/>,
    		document.getElementById('root')
  	 );

   * As PROPS(propriedades) são como as de tags de HTML, porém
     podem ser chamadas como quizermos. E para mostrar as PROPS
     no componente é necessário colocar entre chaves{} 
     'props.NomeDaPropriedade'.


Também é possivel fazer CONDIÇÕES com PROPS nos COMPONENTES:  

	- function BemVindo(props) {
    		if(props.nome) {
        		return <h1>Olá {props.nome}!</h1>
    		}
    		return <h1>Olá, Estranho!</h1>
    
	  };

	  ReactDOM.render(
    		<div>
    			<BemVindo nome='Bernardo'/>
    			<BemVindo/>
    		</div>,
    		document.getElementById('root')
	  );

	EXPLICAÇÃO POR LINHA:
	
	Parte componente:
	1- function BemVindo(props) {...}: COMPONENTE com PROPS.

	2- if(props.nome) {...}: SE(if) existir a propriedade 
				 'nome'(props.nome)...

	3- return <h1>Olá {props.nome}!</h1>: Retorna um <h1> com
					      o PROPS 'nome'.

	4- return <h1>Olá, Estranho!</h1>: SE NÃO, retorna uma tag
					   <h1> simples.

	Parte render:
	5- ReactDOM.render(...): Para renderizar com REACT...

	6- <div>...</div>: Como temos MAIS DE UMA tag, é 
			   necessário criar uma tag PAI <div>.

	7- <BemVindo nome='Bernardo'/>: COMPONENTE com 
				 	PROPS 'nome', Que irá 
					concordar com a condição
					(if) e será renderizado em
					uma tag <h1> com a PROPS.

	8- <BemVindo/>: COMPONENTE sem PROPS, que não irá 
	 		concordar com a condição (if) e será 
			renderizado com uma tag <h1> simples.

	9- document.getElementById('root'): Vai renderizar todo o
					    o conteúdo dentro da
					    tag com ID 'root'.

    		

CONVENSÃO DE ORGANIZAÇÃO DOS COMPONENTES

Quando temos MAIS de UM componente criamos um COMPONENTE 'App',
para organizarmos todos os componentes dentro do componente 'App'.
Para quando formos RENDERIZAR(.render) utilizamos apenas a 
tag <App/>. O que melhora   muito a LEGIBILIDADE do nosso script.

ex.: function App() {
    	return (
        	<div>
            		<BemVindo nome='Bernardo'/>
           		<Conteudo/>
        	</div>
    	);
    };

    ReactDOM.render(
    	<App/>,
    	document.getElementById('root')
    );	


	* Criamos o componente 'App' e DENTRO dele colocamos os 
	  outros componentes: <Bemvindo/> e <Conteudo/>.
	  E quando formos renderizar(.render) apenas colocamos o
	  COMPONENTE 'App' que já possui toda a organização dos
	  componentes da nossa página. 

OBS.: Se optamos por criar um arquivo(.js) só para os componentes
      (ex.: comp.js) para utilizarmos ele no script é necessário 
      declarar no arquivo HTML(index.html). Desta forma:

	- <script type="text/babel" src="comp.js"></script>
    	  <script type="text/babel" src="app.js"></script>


   * É OBRIGATÓRIO: SEMPRE ACIMA do script 'app.js'!
 
      - Também serve para FrameWorks como 'BootStrap'. Qualquer 
   	arquivo .js deve vir ACIMA do script 'app.js'.



COMPONENTES DE CLASSES

Para criamos um COMPONENTE como CLASSE(class), é um pouco 
diferente dos componentes de Função, vejamos:

	ex.:  class Destaque extends React.Component {
    		constructor(props) {
        		super(props);
    		}
		
		render() {
			return (
				<div>
					<h1>Olá mundo</h1>
				</div>
			)
		}
	      };


	1- class Destaque extends React.Component {...}:
		Quer dizer que a CLASSE(class) 'Destaque' 
		Se ESTENDE(extends) 
		A um COMPONETE REACT(React.Component)

	2- constructor(props) {...}:
		O construtor(constructor) para criar as 
		Propriedades(props)

	3- super(props):
		Para RECUPERAR as propriedades(props)

	4- render() {...}: 
		Onde vai as tags do COMPONENTE.

   OBS.: É OBRIGATÓRIO SEMPRE USAR ESTES MÉTODOS NA CRIAÇÃO DE
	 UM COMPONETE DE CLASSE.


Para PEGAR PROPS DENTRO DE UM COMPONENTE DE CLASSE:

	1- DECLARE o PROPS normalmente:

		- function App() {
    			return (
                	  <Destaque texto='Oi, isto é um texto!'/>
			)
		  };

		* Declaramos a PROPriedade 'texto'.

	2- Para MOSTRAR NO ELEMENTO:
	   NORMALMENTE em um componente de função seria apenas: 
	   'props.texto'. Porém em um COMPONENTE DE CLASSE é 
	   necessário colocar o 'this.' antes:

		- class Destaque extends React.Component {
    			constructor(props) {
        			super(props);
    			}
		
			render() {
				return (
					<h1>{this.prop.texto}</h1>
				)
			}
	      	  };


	    * {this.props.texto}: ESTE(this.) é OBRIGATÓRIO. 




ESTADO(state) de um componente de classe

O estado(state) é um objeto interno que permite aos componentes 
armazenar e gerenciar dados que podem mudar ao longo do tempo e 
afetar a renderização do componente. Diferente das props, o estado
é gerenciado e alterado exclusivamente dentro do próprio 
componente.

1- É necessário dar um ESTADO(state) INICIAL:

   * DENTRO DO METODO 'contructor()'...
	ex.: 
       		this.state = {
           		nome: 'Bernardo'
       	 	}


   * Para MOSTRAR nas tags do COMPONENTE:

	ex.: render() {
        	return (
			<h1>{this.state.nome}</h1>
		)
	     }


2- Para MUDAR o ESTADO(state) após uma ação:

   * É ncessário usar um método para troca de ESTADO: set.State()

	- trocaNome = ()=> {
        	this.setState(function(prevState) {
			return { nome: 'Anderson'}
		})
	  }

	1- trocaNome = ()=> {...}: 
		Criamos uma variavel que recebe uma FUNÇÃO(pode 
		ser uma função direto, sem a variavel).

	2- this.setState(function(prevState) {...}):
		O método de MUDANÇA de ESTADO(this.setState)
		Com uma FUNÇÃO que recebe como parametro o 
		'prevState'(O ANTIGO ESTADO).

	3- return { nome: 'Anderson'}: 
		RETORNA UM OBJETO que muda a propriedade 'nome' do 
		'prevState'(Estado Antigo).


	
ESTADO(hook) em COMPONENTES FUNCIONAIS

 1- Criar o ESTADO em um componente funcional é um pouco diferente
   porém mais direto:

	- const [count, setCount] = React.useState(0)

		* Criamos uma CONSTante com 2 valores dentro de 
		  colchetes:

			- count: Valor do estado;

			- setCount: Nome da função que vai gerar
				    o novo valor do estado.
				    (Por padrão sempre será 'set',
				     e o nome do valor do estado).
				    ex.: setCount.

		* React.useState(0): É o método HOOK, e o valor 
				     inicial do ESTADO. Que no
				     caso é 0.


 2- Para MOSTRAR o ESTADO nas tags html:

	- function Contador(props) {

    		const [count, setCount] = React.useState(0)

    		return (
			<h1>Contador: {count}</h1>
		)}

	Basta colocar o nome do valor do ESTADO dentro de CHAVES{}.


 3- Para ALTERAR o ESTADO(hook) após uma ação: 

   * A ação será ao CLICAR, ou seja, 'onclick' EM REACT(jsx):
  
	- onClick={nome da função}

        * Dentro da tag onde você quer que a ação aconteça.
	
		ex.: <button onClick={add}> Add </button>


   1° Criar a função para alterar o ESTADO:
	
	- function add() {
        	setCount(count + 1);
    	  }

		* function add() {...}: Criamos a função 'add'.

		* setCount(count + 1): A função que declaramos
					dentro das chaves junto
					com o valor do ESTADO,
					recebe:
					O VALOR do ESTADO(count)
					+ 1.
					Isto faz com que o valor
					do ESTADO receba +1.


   2° CHAMAR esta função 'add' e MOSTRAR na tela:

	- function Contador(props) {

    		const [count, setCount] = React.useState(0)

    		function add() {
        		setCount( count + 1);
		}
		
		return (
			<h1>Contador: {count}</h1>

			<button onClick={add}> Add </button>
		)}

	EXPLICAÇÃO: 
		
		* Toda vez que o usuario clicar no botão:
			- <button onClick={add}>

		* Vai incrementar +1 ao VALOR do ESTADO, e mostrar
		  no titulo <h1>:
			- <h1>Contador: {count}</h1>



ESTADO(hook) Effect Hook(EFEITO COLATERAL)

O Effect Hook, ou useEffect, é um hook do React que permite 
executar efeitos colaterais em componentes funcionais. Tipo uma
FUNÇÃO CALLBACK que da o retorno depois que o componente é 
renderizado.

   1° Criando o HOOK de callback para saber se o componente foi
      renderizado:

	- React.useEffect(()=> {
        	console.log('Componente Renderizado!')
         });

	* Vai retornar no console após a RENDERIZAÇÃO do 
	  componente.


   2° Criando HOOK de CALLBACK para saber se o ESTADO foi 
      alterado:

	- React.useEffect(()=> {
        	console.log('Estado Alterado!')
          }, [count]);

	* Apenas acrescentando o ESTADO entre colchetes '[count]'
	  E teremos o retorno toda vez que o ESTADO for ALTERADO.


   3° Criando HOOK de CALBACK para saber se o Componente foi 
      MONTADO:

	- React.useEffect(()=> {
        	console.log('Estado NOME Alterado!')
    	  }, []);

	* Apenas deixando o ARRAY[] vazio.



MANIPULADORES DE EVENTO

Em REACT TODOS os manipuladores de evento será com CamelCase:

ex.: 	Em JS:		     Em REACT:

     onclick = ''      \    onClick = {}
     onmouseover = ''  \    onMouseOver = {}
     onkeyup = ''      \    onKeyUp = {}



RENDERIZAÇÃO CONDICIONAL EM REACT

Em JSX(React) podemos fazer condições INLINE, que são chamadas de 
condições ternarias:

Condição com IF/ELSE:

	- condição ? True : False

  PRIMEIRO vem a condição, 
  APÓS o '?' oque renderiza se for VERDADEIRA a condição 
  e APÓS o ':' oque renderiza se for FALSA.

  ex.: {
	  count >= 10 ? <h1>Verdadeiro</h1> : <h1>Falso</h1>
       }

	* count >= 10: Se 'count'(ESTADO) for igual a 10...

	* ? <h1>Verdadeiro</h1>: Se 'count' for igual a 10 vai
				 renderizar: <h1>Verdadeiro</h1>.

	* : <h1>Falso</h1>:  SE 'count' não for igual a 10 vai
			     renderizar: <h1>Falso</h1>


OBS.: É OBRIGATÓRIO ser entre CHAVES{};
      Estas condições são no JSX(tags), ou seja, no RETORNO de um 
      componente. ex.: return(...).



Condição para TESTAR se é VERDADEIRO:

	- condição && TRUE

   PRIMEIRO a condição; 
   APÓS o '&&' é oque acontece se for verdadeiro.

   ex.: {
	    nome && <div>Verdadeiro</div>
	}

	* nome: SE 'nome'(ESTADO) existir...

	* && <div>Verdadeiro</div>: Vai renderizar a <div>.

OBS.: É OBRIGATÓRIO ser entre CHAVES{};
      Estas condições são no JSX(tags), ou seja, no RETORNO de um 
      componente. ex.: return(...).



LISTAS E CHAVES em REACT

Em REACT o método mais utilizado para manipular ARRAY é o .map().
Este método cria um novo array com os resultados da aplicação de 
uma função a cada elemento do array original, sem modificar o 
array original. 

   Como funciona:

	- const arr = [1, 2, 3, 4, 5];

	  const arrDuplo = arr.map(n => n *2);

	* arr.map(...): Método .map() no array 'arr';

	* (n => n *2): Vai percorrer o array 'arr', e cada 
		       Numero(n) vai ser trocado (=>) pelo 
		       NUMERO(n) multiplicado por 2 no 
		       NOVO ARRAY que o .map() retorna.

	ERA: 	  arr = [1, 2, 3, 4, 5];
	RETORNO:  arrDuplo = [2, 4, 6, 8, 10];


   Como utilizamos em REACT:

   Em React, você geralmente usa o map() para transformar um array
   de dados em um array de elementos JSX (como <li>, <div>, etc.)
   que podem ser renderizados na interface.

	ex.: const itemLista = arr.map(
    		(numero) => 
        	<li key={numero.toString()}> {numero} </li>
	    ); 

	* arr.map( (numero) => ...): Para cada numero do ARRAY 
				     'arr'...

	* <li key={numero.toString()}> {numero} </li>:
			Vai colocar o VALOR de numero dentro de
			um <li>. 

	OBS.: O atributo 'key={numero.toString()}' é necessário
	      para que o JSX possa identificar cada <li> pela sua
	      sua chave(key). E neste caso foi o proprio numero
	      convertido em STRING(toString()) pois o atributo
	      'key' PRECISA ser em formato de string.


MANIPULANDO MATRIZES EM REACT

   DENTRO DO COMPONENTE APP:

     1- Vamos criar um ARRAY => com OBJETOS => com DADOS:
	
	- function App() {
	     const usuarios = [
        	{id: 1, nome: 'Anderson', idade: 25},
        	{id: 2, nome: 'Bernardo', idade: 27},
        	{id: 3, nome: 'Maria', idade: 21}
    	     ]
	  };


     2- Vamos fazer o RETORNO, que é oque será renderizado:

	- return (
        	<ul><Item lista={usuarios}/></ul>
   	  )
	
	* Vai RETORNAR uma <ul> e seus itens<li> virão de outro 
	  componente chamado <Item/>.

	* O componente <Item/> recebe uma propriedade(props) 
	  chamada 'lista' que recebe a MATRIZ 'usuários'.


     3- Vamos criar o componente que irá gerar os itens da 
	lista<li>:

	- function Item(props) {...}


   DENTRO DO COMPONENTE ITEM:
     
     4- Vamos receber a MATRIZ que veio pela propriedade(props)
	'lista':

	- function Item(props) {
	  	const usuarios = props.lista
	  }


     5- Vamos fazer o RETORNO que vai gerar os itens da lista<ol>
	no componente App:

	- return (
        	usuarios.map(
            		usuario => 
                	<li key={usuario.id.toString()}> 
			{usuario.nome} </li>
        	)
    	  )

	* usuarios.map(...): Vai MAPEAR a matriz usuarios.

	* usuario => : Para CADA item na matriz...

	* <li key={usuario.id.toString()}>...</li> : 
		Será gerado um item de lista<li> com uma 'key' que
		receberá o valor da propriedade ID do 
		item(usuario.id)
		transformado em string(.toString()).

	* {usuario.nome}: Dentro do <li> estará o valor da 
			  propriedade NOME do item(usuario.nome).

	
SCRIPT COMPLETO:

	- function App() {
	     const usuarios = [
        	{id: 1, nome: 'Anderson', idade: 25},
        	{id: 2, nome: 'Bernardo', idade: 27},
        	{id: 3, nome: 'Maria', idade: 21}
    	    ]
	    return (
                <ul><Item lista={usuarios}/></ul>
   	    )
	 };

	 function Item(props) {
    	    const usuarios = props.lista
       	    return (
        	usuarios.map(
            	    usuario => 
                    <li key={usuario.id.toString()}> 
		    {usuario.nome} </li>
                )
            )
	 };

	 ReactDOM.render(
    		<App/>,
    		document.getElementById('root')
	);



FORMULÁRIOS COM REACT

Para trabalhar com formulários independente do tipo de INPUT, e
manipular os DADOS vindos do input utilizamos o STATE(estado)
E para CADA INPUT temos de dar um valor INICIAL:

ex. Em um FORMULÁRIO com input 'text'  &  input 'radio': 

	- const [form, setForm] = React.useState({
       	 	cliente: '',
        	dia: '',
        	horario: ''
 	  })

		* Para AMBOS normalmente se trabalha com o valor 
		  inicial ''(vazio).


ex. Em um FORMULÁRIO com input 'checkbox':

	- const [form, setForm] = React.useState({
        	wifi: false,
        	churrasqueira: false,
        	piscina: false
    	  })

		* Para CADA opção normalmente se trabalha com 
		  BOOLEANOS(true, false)


PARA MNIPULAR AS MUDANÇAS QUE OCOREREM NO FORMULÁRIO:

OBS.: As propriedades do ESTADO tem que ter O MESMO NOME do 
      atributo 'name' do input:

	ex: 

	const [form, setForm] = React.useState({
       	 	cliente: ''
	})

	<input type='text' name='cliente'></input>


		* cliente: ''  ===  name='cliente'


1- Vamos ADICIONAR em TODOS os INPUTS do formulário o atributo:
   'onChange', chamando a função que irá guardar todas as mudanças:

	- <input onChange={handleChange} name="cliente"></input>
	
	  * {handleChange} é a constante que contém FUNÇÃO que 
	    manipula as mudanças.


2- Vamos criar uma constante que contém a FUNÇÃO que vai GUARDAR 
   cada mudança que ocorrer no formulário.

	- const handleChange = (evento) => {
        	const auxForm = { ...form };
        	auxForm[evento.target.name] = evento.target.value;
        	setForm(auxForm);
    	  }

	EXPLICAÇÃO POR LINHA:

		1- const handleChange = (evento) => {...}:
			A constante que 
			MANIPULA MUDANÇAS(handleChange) recebe uma
			função com o 'evento' como parametro.
			'evento' é o local onde ocorre uma mudança.

		2- const auxForm = { ...form }:
			Uma constante que recebe a CÓPIA do objeto
			'form'. Que é onde estão os ESTADOS do 
			formulário.
			{...form}: É um método do JS para copiar 
				   um objeto, neste caso é 'form'.

		3- auxForm[evento.target.name] = 
		   evento.target.value:

			* auxForm[evento.target.name] = :
				A PROPRIEDADE do objeto contido em
				'auxForm' que for IGUAL ao 
				ATRIBUTO 'name' do alvo(target)
				recebe...

			* evento.target.value: 
				O VALOR(value) do alvo(target).

		4- setForm(auxForm): Muda o objeto 'form' para 
				     receber o objeto contido em
				     'auxForm'.


3- Criando HOOK de CALLBACK para saber se o ESTADO/VALOR foi 
   alterado:

	- React.useEffect(()=> {
        	console.log(form)
          }, [form]);

	* Acrescentando o ESTADO entre colchetes '[form]'
	  teremos o retorno toda vez que o ESTADO/VALOR for 
	  ALTERADO.

*4- EXTRA!!!
	Para input tipo 'CHECKBOX' que recebe valores BOOLEANOS
	este método não vai funcionar. Mas podemos adicionar uma
	CONDIÇÃO TERNÁRIA para tratar do input 'checkbox':

	Na linha onde pegamos o campo de input alterado pelo 
	'name'...

    ex.: auxForm[evento.target.name] = evento.target.type ===
	 'checkbox' ? evento.target.checked : evento.target.value; 

	* evento.target.type === 'checkbox' ? :
		SE o TIPO do INPUT for igual a 'checkbox'...

	* ? = SE FOR VERDADE...
	  evento.target.checked :
		O input vai receber o atributo 'checked'. Que 
		sempre retornará um valor BOOLEANO, se for 
		'checked' é TRUE, se não for 'checked' é FALSE.

	* : = SE NÃO(else)...
	  evento.target.value
		SE NÃO for do tipo 'checkbox', vai pegar o valor
		do input.				


PARA TRABALHAR COM OS DADOS DO FORMULÁRIO AO ENVIAR(onSubmit)

1- É necessário adicionar o EVENTO 'onSubmit' ao formulário para 
   chamar a função que denomina oque acontece AO ENVIAR os dados.

	- <form onSubmit={enviarForm}>...</form>

	* Entre {} está a VARIAVEL que contém a função.


2- Criar a váriavel que contém a função:

	- const enviarForm = (envio) => {
        	envio.preventDefault();
		...
	  }

	* O parametro 'envio' é o evento 'onSubmit'(ao enviar);
	
	* envio.preventDefault(): AO ENVIAR(envio), previnir o
				  padrão(preventDefault).
				  Para NÃO permitir que ao enviar
				  dê um 'refresh' na página.


3- Após criada a constante coma a função podemos manipular os 
   dados como quisermos, para enviar pro BACK-END, fazer VALIDAÇÃO
   etc...
   Qualquer dado pode ser acessado pelo ESTADO. Neste caso 'form'.
   
	ex.: let cliente = form.cliente
	     let dia = form.dia
	     ...



CRIANDO UM PROJETO REACT MAIS PROFISSIONAL

1- Vá ao CMD e encontre o local onde vc deseja criar o seu 
   projeto:

	- cd C:\Users\Desktop\Documents\Estudos Programação/react

2- Agora CRIE o seu projeto como o comando:

	- npm create vite@latest

   OU PARA PULAR O PASSO 3:

	- npm create vite@latest nomeDoProjeto -- --template react

	* Assim já vai criar o projeto em react e JS.

3- Crie o nome do seu projeto, e as tecnologias que vc vai usar 
   nele: 

      ex.: 
	   |
	   o  Project name:
	   |  projeto1
	   |
	   o  Select a framework:
	   |  React
	   |
	   o  Select a variant:
	   |  JavaScript

4- Para acessar o seu projeto basta digitar: cd NomeDoProjeto

	- cd projeto1

5- Para abrir o projeto no VsCode: 

	- code .

6- No VsCode abra o terminal(ctrl + ''), para instalar as 
   dependencias do NPM. Digite:

	- npm install

7- Para RODAR o seu projeto, digite no terminal do VsCode:

	- npm run dev




PARA CRIAR COMPONENTES EXTERNOS:

1- Na pasta 'src', crie uma pasta chamada 'components', e nela 
   ficarão seus componentes.


IMPORT e EXPORT

 * Para EXPORTAR componentes para a página principal(main.jsx)
   basta em cada componente, antes da função adicionar o metodo
   'export':

	ex.: export function Navbar() {...}


 * Para IMPORTAR, basta ir na pagina principal(main.jsx) e fazer
   o 'import' e o nome do componente entre {}:

	ex.: import { Navbar } from './components/navbar.jsx'


 * Também podemos ter MAIS DE UM componente no mesmo arquivo, 
   basta fazer o mesmo processo para EXPORTA-LO...
   E para IMPORTAR basta adicionar o novo componente as {} do 
   'import' no arquivo principal(main.jsx):

	ex.: import { Navbar, SubNavbar } from './components/...'


 * Para utilizar ESTADO(useState) e o EFEITO COLATERAL(useEffect),
   nos nossos componentes é necessário IMPORTAR do REACT no 
   arquivo do componente, desta forma:

	- import { useState, useEffect } from 'react'




PARA NAVEGAÇÃO ENTRE PAGINAS COM REACT

1- Em React puro não é posivel fazer navegação por meio de rotas, 
   pois os arquivos .jsx não são paginas, são componentes. Mas 
   caso você queira se utilizar de rotas entre páginas é 
   necessário instalar uma biblioteca em seu projeto: 
   'react-router'.

	- npm install react-router

2- Agora vamos importar alguns modulos do 'react-router' para
   podermos fazer o roteamento entre paginas:

	- import { BrowserRouter, Routes, Route } from 
          'react-router'


3- Também vamos importar as nossas páginas que estão em uma pasta
   chamada 'pages' dentro de 'src':

	- import Home from './pages/Home'
	  import Sobre from './pages/Sobre'


4- Para criar as rotas das paginas, é necessário criar a estrutura
   com os modulos em um componente, que neste caso foi o 'App.jsx'

	- function App() {

  		return (
    		   <BrowserRouter>
      		      <Routes>
        		<Route path='/' element={<Home/>} />
        		<Route path='/sobre' element={<Sobre/>} />
      		      </Routes>
    		   </BrowserRouter>
      
  		)
	   }

	EXPLICAÇÃO POR LINHA:

		1- <BrowserRouter> ... </BrowserRouter>:
			É o roteador.

		2- <Routes> ... </Routes>: 
			Onde vão as ROTAS.

		3- <Route path='/' element={<Home/>} />:
			ROTA para a página: '/', e a 
			página/componente que será renderizada: 
			<Home/>.

		4-  <Route path='/sobre' element={<Sobre/>} /> 
			ROTA para a página: '/sobre', e a 
			página/componente que será renderizada: 
			<Sobre/>

5- Agora para navegar entre páginas basta fazer a ANCORAGEM <a>,
   Dentro dos componentes das páginas, igual fariamos no HTML 
   comum:

	Dentro do COMPONENTE 'Home' da página principal '/':

	- export default function Home() {
  		return (
    		   <div>
        	      <h1>Home</h1>
        	      <a href="/">Inicial</a> <br/>
        	      <a href="/sobre">Sobre</a> <br/>
        	      <a href="/contato">Contato</a> <br/>
    	   	   </div>
    
  		)
	  }

