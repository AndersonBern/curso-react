REACT 

É uma BIBLIOTECA JavaScript de código aberto, criada para 
construir interfaces de usuário (UI) interativas em aplicações 
web.
Em termos mais simples, React permite que você divida sua 
interface em partes menores e reutilizáveis chamadas componentes.
Cada componente tem sua própria lógica e aparência, o que torna o
desenvolvimento e a manutenção do código mais fáceis. 
 
  - JSX: 
	Uma extensão de sintaxe do JavaScript que permite escrever
	código HTML dentro do JavaScript, facilitando a criação e
	a manutenção de componentes. 


Criando o primeiro script com React:

1- É necessário criar um arquivo HTML e nele adicionar links de 
   script CDN, para poder utuilizar o REACT. Cada elemento em JSX
   é na verdade um OBJETO{}, o que facilita muito a manipulação.

2- No <body> crie uma <div> com ID 'root' por convenção. Pois será
   neste elemento que o nosso script React vai ser mostrado.

	* <div id="root"></div>

3- Crie um <script> apontando para o seu arquivo .js onde será    
   feito o script REACT:

	* <script type="text/babel" src="app.js"></script>

	OBS.: É OBRIGATÓRIO ADICIONAR O ATRIBUTO 'type' com:
	      text/babel. Para que o arquivo .js possa INTERPRETAR
	      o JSX do seu script REACT.

4- No arquivo 'app.js' crie o método de RENDERIZAÇÃO para mostrar
   seu JSX no HTML:

	* ReactDOM.render(<h1>Olá mundo do React!</h1>,
	  document.getElementById('root'));

		- ReactDOM.render(): Para RENDERIZAR na arvore DOM
				     com 2 parametros:

			1- <h1>Olá mundo do React!</h1>: tag HTML;

			2- document.getElementById('root'): 
				A <div> root, que é onde será 
				mostrado o nosso script.


OBS.: Para adicionar uma classe(class) ao elemento basta usar o 
      atributo 'className'.

	ex.: const elemento = <h1 className="header">Olá mundo
	     JSX!</h1>;



Funcionalidades do JSX

O JSX aceita: Constantes/variaveis, objetos, funções, etc...
Para isto basta utilizar as mesmas dentro de chaves{}.

ex. CONSTANTE/VARIAVEL: 

    - const nome = 'Anderson Bernardo';
      const elemento= <h1 className="header">Olá, {nome}!</h1>

ex. OBJETO: 
 
   - const user = {
    	nome: 'Anderson',
    	sobrenome: 'Bernardo'
     };

     const elemento= <h1 className="header">Olá, {user.nome}!</h1>

ex. FUNÇÃO: 

   - function nomeCompleto(user) {
    	return user.nome + ' ' + user.sobrenome;
     };

     const elemento= <h1 className="header">Olá, 
     {nomeCompleto(user)}!</h1>



PARA JSX COM MAIS DE UM ELEMENTO

Quando elementos JSX tem mais de UMA tag, é necessário que eles 
estejam dentro de uma tag PAI. Como uma <div>.

ex.: const elemento = (
    	<div>
            <h1 className="header">Olá, {nomeCompleto(user)}!</h1>
            <p>Isto é um paragrafo.</p>
        </div>
     );

    OBS.: É INTERESSANTE que estes elementos estejam entre 
	  PARENTESES(), para facilitar a leitura e a organização 
	  do script.



COMPONENTES FUNÇÃO E PROPS(propriedades)

COMPONENTES são blocos de construção reutilizáveis que formam a 
interface do usuário, enquanto PROPS são dados que são passados 
de um componente pai para um componente filho. Em resumo, 
COMPONENTES são como peças de LEGO que se encaixam para criar a 
interface, e PROPS são como instruções que dizem a cada peça o 
que fazer ou como se comportar. 

OBS.: Por CONVENSÃO os componentes devem ser nomeados com letra 
      maiuscula no INICIO da palavra e também para SEPARAR 
      palavras(camel-case). 

	ex.: function FazerContagem(){...}


EXEMPLO de COMPONENTE: 

	- function BemVindo() {
        	return <h1>Olá Mundo!</h1>
    	  };

Para RENDERIZAR:

	- ReactDOM.render(
    		<BemVindo/>,
    		document.getElementById('root')
  	 );

   * Um COMPONENTE vira uma TAG. Neste caso <BemVindo/>.

	OBS.: É necessário que após o nome do COMPONENTE e as
	      PROPS tenha uma '/' para FECHAR a tag.


EXEMPLO DE COMPONETE COM PROPS:

	- function BemVindo(props) {
        	return <h1>Olá {props.nome}!</h1>
    	  };

	  ReactDOM.render(
    		<BemVindo nome='Bernardo'/>,
    		document.getElementById('root')
  	 );

   * As PROPS(propriedades) são como as de tags de HTML, porém
     podem ser chamadas como quizermos. E para mostrar as PROPS
     no componente é necessário colocar entre chaves{} 
     'props.NomeDaPropriedade'.


Também é possivel fazer CONDIÇÕES com PROPS nos COMPONENTES:  

	- function BemVindo(props) {
    		if(props.nome) {
        		return <h1>Olá {props.nome}!</h1>
    		}
    		return <h1>Olá, Estranho!</h1>
    
	  };

	  ReactDOM.render(
    		<div>
    			<BemVindo nome='Bernardo'/>
    			<BemVindo/>
    		</div>,
    		document.getElementById('root')
	  );

	EXPLICAÇÃO POR LINHA:
	
	Parte componente:
	1- function BemVindo(props) {...}: COMPONENTE com PROPS.

	2- if(props.nome) {...}: SE(if) existir a propriedade 
				 'nome'(props.nome)...

	3- return <h1>Olá {props.nome}!</h1>: Retorna um <h1> com
					      o PROPS 'nome'.

	4- return <h1>Olá, Estranho!</h1>: SE NÃO, retorna uma tag
					   <h1> simples.

	Parte render:
	5- ReactDOM.render(...): Para renderizar com REACT...

	6- <div>...</div>: Como temos MAIS DE UMA tag, é 
			   necessário criar uma tag PAI <div>.

	7- <BemVindo nome='Bernardo'/>: COMPONENTE com 
				 	PROPS 'nome', Que irá 
					concordar com a condição
					(if) e será renderizado em
					uma tag <h1> com a PROPS.

	8- <BemVindo/>: COMPONENTE sem PROPS, que não irá 
	 		concordar com a condição (if) e será 
			renderizado com uma tag <h1> simples.

	9- document.getElementById('root'): Vai renderizar todo o
					    o conteúdo dentro da
					    tag com ID 'root'.

    		

CONVENSÃO DE ORGANIZAÇÃO DOS COMPONENTES

Quando temos MAIS de UM componente criamos um COMPONENTE 'App',
para organizarmos todos os componentes dentro do componente 'App'.
Para quando formos RENDERIZAR(.render) utilizamos apenas a 
tag <App/>. O que melhora   muito a LEGIBILIDADE do nosso script.

ex.: function App() {
    	return (
        	<div>
            		<BemVindo nome='Bernardo'/>
           		<Conteudo/>
        	</div>
    	);
    };

    ReactDOM.render(
    	<App/>,
    	document.getElementById('root')
    );	


	* Criamos o componente 'App' e DENTRO dele colocamos os 
	  outros componentes: <Bemvindo/> e <Conteudo/>.
	  E quando formos renderizar(.render) apenas colocamos o
	  COMPONENTE 'App' que já possui toda a organização dos
	  componentes da nossa página. 

OBS.: Se optamos por criar um arquivo(.js) só para os componentes
      (ex.: comp.js) para utilizarmos ele no script é necessário 
      declarar no arquivo HTML(index.html). Desta forma:

	- <script type="text/babel" src="comp.js"></script>
    	  <script type="text/babel" src="app.js"></script>


   * É OBRIGATÓRIO: SEMPRE ACIMA do script 'app.js'!
 
      - Também serve para FrameWorks como 'BootStrap'. Qualquer 
   	arquivo .js deve vir ACIMA do script 'app.js'.



COMPONENTES DE CLASSES

Para criamos um COMPONENTE como CLASSE(class), é um pouco 
diferente dos componentes de Função, vejamos:

	ex.:  class Destaque extends React.Component {
    		constructor(props) {
        		super(props);
    		}
		
		render() {
			return (
				<div>
					<h1>Olá mundo</h1>
				</div>
			)
		}
	      };


	1- class Destaque extends React.Component {...}:
		Quer dizer que a CLASSE(class) 'Destaque' 
		Se ESTENDE(extends) 
		A um COMPONETE REACT(React.Component)

	2- constructor(props) {...}:
		O construtor(constructor) para criar as 
		Propriedades(props)

	3- super(props):
		Para RECUPERAR as propriedades(props)

	4- render() {...}: 
		Onde vai as tags do COMPONENTE.

   OBS.: É OBRIGATÓRIO SEMPRE USAR ESTES MÉTODOS NA CRIAÇÃO DE
	 UM COMPONETE DE CLASSE.


Para PEGAR PROPS DENTRO DE UM COMPONENTE DE CLASSE:

	1- DECLARE o PROPS normalmente:

		- function App() {
    			return (
                	  <Destaque texto='Oi, isto é um texto!'/>
			)
		  };

		* Declaramos a PROPriedade 'texto'.

	2- Para MOSTRAR NO ELEMENTO:
	   NORMALMENTE em um componente de função seria apenas: 
	   'props.texto'. Porém em um COMPONENTE DE CLASSE é 
	   necessário colocar o 'this.' antes:

		- class Destaque extends React.Component {
    			constructor(props) {
        			super(props);
    			}
		
			render() {
				return (
					<h1>{this.prop.texto}</h1>
				)
			}
	      	  };


	    * {this.props.texto}: ESTE(this.) é OBRIGATÓRIO. 




ESTADO(state) de um componente de classe

O estado(state) é um objeto interno que permite aos componentes 
armazenar e gerenciar dados que podem mudar ao longo do tempo e 
afetar a renderização do componente. Diferente das props, o estado
é gerenciado e alterado exclusivamente dentro do próprio 
componente.

1- É necessário dar um ESTADO(state) INICIAL:

   * DENTRO DO METODO 'contructor()'...
	ex.: 
       		this.state = {
           		nome: 'Bernardo'
       	 	}


   * Para MOSTRAR nas tags do COMPONENTE:

	ex.: render() {
        	return (
			<h1>{this.state.nome}</h1>
		)
	     }


2- Para MUDAR o ESTADO(state) após uma ação:

   * É ncessário usar um método para troca de ESTADO: set.State()

	- trocaNome = ()=> {
        	this.setState(function(prevState) {
			return { nome: 'Anderson'}
		})
	  }

	1- trocaNome = ()=> {...}: 
		Criamos uma variavel que recebe uma FUNÇÃO(pode 
		ser uma função direto, sem a variavel).

	2- this.setState(function(prevState) {...}):
		O método de MUDANÇA de ESTADO(this.setState)
		Com uma FUNÇÃO que recebe como parametro o 
		'prevState'(O ANTIGO ESTADO).

	3- return { nome: 'Anderson'}: 
		RETORNA UM OBJETO que muda a propriedade 'nome' do 
		'prevState'(Estado Antigo).


	
ESTADO(hook) em COMPONENTES FUNCIONAIS

 1- Criar o ESTADO em um componente funcional é um pouco diferente
   porém mais direto:

	- const [count, setCount] = React.useState(0)

		* Criamos uma CONSTante com 2 valores dentro de 
		  colchetes:

			- count: Valor do estado;

			- setCount: Nome da função que vai gerar
				    o novo valor do estado.
				    (Por padrão sempre será 'set',
				     e o nome do valor do estado).
				    ex.: setCount.

		* React.useState(0): É o método HOOK, e o valor 
				     inicial do ESTADO. Que no
				     caso é 0.


 2- Para MOSTRAR o ESTADO nas tags html:

	- function Contador(props) {

    		const [count, setCount] = React.useState(0)

    		return (
			<h1>Contador: {count}</h1>
		)}

	Basta colocar o nome do valor do ESTADO dentro de CHAVES{}.


 3- Para ALTERAR o ESTADO(hook) após uma ação: 

   * A ação será ao CLICAR, ou seja, 'onclick' EM REACT(jsx):
  
	- onClick={nome da função}

        * Dentro da tag onde você quer que a ação aconteça.
	
		ex.: <button onClick={add}> Add </button>


   1° Criar a função para alterar o ESTADO:
	
	- function add() {
        	setCount(count + 1);
    	  }

		* function add() {...}: Criamos a função 'add'.

		* setCount(count + 1): A função que declaramos
					dentro das chaves junto
					com o valor do ESTADO,
					recebe:
					O VALOR do ESTADO(count)
					+ 1.
					Isto faz com que o valor
					do ESTADO receba +1.


   2° CHAMAR esta função 'add' e MOSTRAR na tela:

	- function Contador(props) {

    		const [count, setCount] = React.useState(0)

    		function add() {
        		setCount( count + 1);
		}
		
		return (
			<h1>Contador: {count}</h1>

			<button onClick={add}> Add </button>
		)}

	EXPLICAÇÃO: 
		
		* Toda vez que o usuario clicar no botão:
			- <button onClick={add}>

		* Vai incrementar +1 ao VALOR do ESTADO, e mostrar
		  no titulo <h1>:
			- <h1>Contador: {count}</h1>



ESTADO(hook) Effect Hook(EFEITO COLATERAL)

O Effect Hook, ou useEffect, é um hook do React que permite 
executar efeitos colaterais em componentes funcionais. Tipo uma
FUNÇÃO CALLBACK que da o retorno depois que o componente é 
renderizado.

   1° Criando o HOOK de callback para saber se o componente foi
      renderizado:

	- React.useEffect(()=> {
        	console.log('Componente Renderizado!')
         });

	* Vai retornar no console após a RENDERIZAÇÃO do 
	  componente.


   2° Criando HOOK de CALLBACK para saber se o ESTADO foi 
      alterado:

	- React.useEffect(()=> {
        	console.log('Estado Alterado!')
          }, [count]);

	* Apenas acrescentando o ESTADO entre colchetes '[count]'
	  E teremos o retorno toda vez que o ESTADO for ALTERADO.


   3° Criando HOOK de CALBACK para saber se o Componente foi 
      MONTADO:

	- React.useEffect(()=> {
        	console.log('Estado NOME Alterado!')
    	  }, []);

	* Apenas deixando o ARRAY[] vazio.



MANIPULADORES DE EVENTO

Em REACT TODOS os manipuladores de evento será com CamelCase:

ex.: 	Em JS:		     Em REACT:

     onclick = ''      \    onClick = {}
     onmouseover = ''  \    onMouseOver = {}
     onkeyup = ''      \    onKeyUp = {}

